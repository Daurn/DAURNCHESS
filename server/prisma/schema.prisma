generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  rating    Int      @default(1200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  gamesAsWhite Game[]        @relation("WhitePlayer")
  gamesAsBlack Game[]        @relation("BlackPlayer")
  wonGames     Game[]        @relation("Winner")
  messages     ChatMessage[]
  Move         Move[]

  @@map("users")
}

model Game {
  id        String     @id @default(uuid())
  whiteId   String?    @map("white_id")
  blackId   String?    @map("black_id")
  winnerId  String?    @map("winner_id")
  status    GameStatus @default(WAITING)
  fen       String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  moves     String[]   @default([])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  isBotGame Boolean    @default(false)
  elo       Int?

  // Relations
  white    User?         @relation("WhitePlayer", fields: [whiteId], references: [id])
  black    User?         @relation("BlackPlayer", fields: [blackId], references: [id])
  winner   User?         @relation("Winner", fields: [winnerId], references: [id])
  messages ChatMessage[]
  Move     Move[]

  @@map("games")
}

model ChatMessage {
  id        String   @id @default(uuid())
  gameId    String   @map("game_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model Move {
  id        String   @id @default(uuid())
  gameId    String   @map("game_id")
  playerId  String?  @map("player_id")
  move      String // Notation SAN ou UCI
  number    Int // Num√©ro du coup (1, 2, 3, ...)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  game   Game  @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player User? @relation(fields: [playerId], references: [id])

  @@map("moves")
}

enum GameStatus {
  WAITING
  PLAYING
  FINISHED
  ABANDONED
}
